##Module 1: Sitecore Experience platform
- xManagement architecture: Sitecore support horizontal & vertial scaling, multiple GEO cluster
- Publishing process: synchronizes Master & Web db by adding items, updating items, removing deleted/unpublishable items. 
- SitecorePublishing service: from 8.2, .net core, microservice.
- XP, XConnect Client API, xConnect, xDB: 
- Define xCMS ? web authorization, create content
- Describe features of WCMS ? Analytics, Insights, Decisions and Automation
- 3 foundation pillars of WCMS ? DataDefinition, content, presentation
- Sitecore architecture? MVC
- Terminology? Experience Editor, Content Editor
- Sitecore app & users

## Module 2: 
- Describe template's building blocks
- Name field types (avoid same field name in template & parent)
- Give examples of how u use source fields 
- Idientify When you need to use template inheritance
- Apply template inheritance to new and existing templates
- List what you should consider when you apply inheritance to templates.
- Describe the purpose of Standard template.
- Use the templates Manager to build and configure a site infrastructure
- State the importance of setting up icons on templates
- Templates define the type of item.
- Template contains configuration for: Fields, field section , icon
- Template's recommended practices: short friendly names, seticon, logical folder structure, inheritance, avoid duplicate names.
- Field Version: versioned, unversioned, shared
- FieldSource vs datasource:FieldSource allows the configuration of extra properties in a template ( set FieldSource of an image field to restrict the selection for authors) while DataSource is for component to render content from the specific items.

## Module 3:
- Experience editor: To allow inline-edit in , use sitecore field helper. @html.Sitecore().Field("")
- ExperienceEditor: designing mode: to allow user compose the page dynamically by following action: add,remove, move, configComponents
- ViewRendering(standard Razor view , default model, little code) vs ControllerRendering (for complex rendering, MVC)
- StaticRendering: add components to presentation by code
- DynamicRendering: use placeholder.
- StaticBinding(header, footer)  vs DynamicBinding (support Sitecore's personalization  & testing feature).
- PlaceholderSettings : make placeHolders selectable in ExperienceEditor, restrict components. If allowed controls are not defined, all controls can be added to placeholder.
- Layout delta (sharedLayout: affect all version, FinalLayout: affect current version, Reset: remove delta): the changes of the page in the experienceEditor.
- Dynamic placeholder: when a component appear twice on the page.


## Module 4: Parameters
- Setting datasource (Selecting associate content): Make component reusable.
- DataSource Location: limit the folders that editors can select content from.
- Parameters allow adding custom properties to components such as styling, config, output. BestPractice: include all properties in ViewModel.
- Rendering Parameters Template: Support user in using parameters.
- ParametersTemplate vs DataSourceTemplate
- Compatible rendering: same datasource , parameters. 


## Module 5: Navigation Pratices
- How sitecore render links ? LinkManager is in charge of generating urls.
- What is sitecore API, why it relates to the tree? Because it is taken from content tree.
+ Sitecore.Data.items.Item.GetChildren() to get children of item
+ Sitecore.Data.items.Item.Parent
+ Sitecore produce translated URLs: use item's DisplayName
+ wildcard items: ../events/climbing/abc.aspx
+ LINQ: to filter items that are based on searchItem

## Module 6: Configuration
get-webbinding
- How sitecore scale with the user of server roles? Enable/Disable chunks of server by role for each server when it use vertical scaling.
- How to install sitecore package ? use Controlpanel, Administration
- How to config multiple site ? Add a config for new site in App_Config/Include, specify path, hostname, scheme, name. a folder for each site and each site have it's own home item. Shared contents will be outside of any site structure.
+ Store shared content outside of any site strucure
+ Create Anti-Package to undo package installation
+ Sitecore package to copy certain items/files from 1 sitecore installation to another
+ map home item corresponds to each hostname in a Config, include file patching the web.config
+ Alphabetically according to name of file & subfolder. App_Config/Include
+ Base, Sitecore, Modules, Custom, Environment : config is loaded as this order. You can force patch files to load first with the <LoadOrder> in layers.config
+ Packages: transfer items/files between sitecore instances. SitecorePackageDesigner, SitecoreRock. Create undo package to uninstall package.
+ Module: used to extend functionality, are found on marketplace.

## Module 7: Complex Field Types
- What is non-editable fields: Complex fields that cannot be rendered directly using field renderer.
- How to define which fields can be edited in ExperienceEditor? MultipleReferences, ReferneceField, checkbox
- How to make all field editable in ExperienceEditor? Use FieldEditorButton,  EditFrame
- How to display complex field? We do not render the field, but We get the item of each ID, and use name/displayname
- What is edit frame?  a region that will react to click beehavior by showing a tool bar
- What is Edit Frame Button ? is a button that can be added to any toolbar in ExperienceEditor.
- What is Field Editor: a popup windows that allow user to edit complex fields.
+ Click Edit Frame => Click Edit Frame Button => Show Field Editor
+ Edit Frame Button: Open a pop up where fields are edited.
+ Raw value of a field: The value of the field as stored in the database.
+ When would you render the raw value of a field: Never render a raw value to the website.
+ Class we use to access the contents of a TreeList field: MultilistField
+ General Links (field type): can be edited inline in experience view
? When do we create viewRendering, what is the differences compared to ControlRendering

## Module 8: Search
- What is available search providers that sitecore offers? solr , azure search,   lucense.
- How to config a custom index? Add config, Go to Solr index data, go to Controlpanel to reindex.
- Item bucket settings: change behavior of clicking on 1 item of search result
- Bucket : folder strucutre created, hide foldere structure, search interface. Use it when we have lots of content & it is not well suited to a tree, we use search & its structure is  not part of a tree
- Saved search result in bucket
- Lock child relationship: to maintains hierachical relationship between items.
- [x] currentItem, choose folder as bucket, sync 
- Search api for user: GroupBy, aggreate, sum are not supported
- Facet: counts of results, groupings of results, inexpensive
+ Make an item in to a bucket if it have a large number of descendants
+ not bucketable item will show in the contentTree
+ StoreageType=yes : No need to access sitecore database to query its value
+ Index only what is required to the index.
+ Sitecore.ContentSearch, Sitecore.ContentSearch.Linq
+ When index, It crawls the items in the content tree and indexes the fields values of all your items.

## Prepare for exam:
+ We should focus on the application of Sitecore *CONCEPT* and *KNOWLEDGE*
    Templates 19%, 
    Presentatation 18%, 
    Fields and Field Types 13%, 
    Search 11%, 
    Development Environment 9%, 
    Creating and Editing Items 8%
    API, Architecture, Xmanagement, 
    Versioning, publishing,
    Sitecore Documnentatation & support,  package, media, installation
